name: Automated Testing

on:
  push:
    branches: [ main, feature/* ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  actions: read

jobs:
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Install testing dependencies
      run: |
        npm install --no-save jest @jest/globals jest-environment-node
        
    - name: Create test directory
      run: mkdir -p tests
      
    - name: Create basic tests
      run: |
        cat > tests/constants.test.js << 'EOF'
        const CONSTANTS = require('../src/shared/constants');
        
        describe('Constants', () => {
          test('should have required window constants', () => {
            expect(CONSTANTS.WINDOW).toBeDefined();
            expect(CONSTANTS.WINDOW.PREVIEW_MAX_WIDTH).toBeGreaterThan(0);
            expect(CONSTANTS.WINDOW.PREVIEW_MAX_HEIGHT).toBeGreaterThan(0);
          });
          
          test('should have timeout constants', () => {
            expect(CONSTANTS.TIMEOUTS).toBeDefined();
            expect(CONSTANTS.TIMEOUTS.INSTRUCTIONS_FADE).toBeGreaterThan(0);
          });
          
          test('should have file constants', () => {
            expect(CONSTANTS.FILES).toBeDefined();
            expect(CONSTANTS.FILES.SCREENSHOT_PREFIX).toBe('screenshot-');
            expect(CONSTANTS.FILES.EXTENSION).toBe('.png');
          });
        });
        EOF
        
    - name: Create Jest config
      run: |
        cat > jest.config.js << 'EOF'
        module.exports = {
          testEnvironment: 'node',
          testMatch: ['**/tests/**/*.test.js'],
          collectCoverageFrom: [
            'src/**/*.js',
            '!src/renderer/**/*.js',
            '!**/node_modules/**'
          ],
          coverageDirectory: 'coverage',
          coverageReporters: ['text', 'lcov'],
          testTimeout: 10000
        };
        EOF
        
    - name: Run tests
      run: |
        echo "🧪 Running unit tests..."
        npx jest --verbose --coverage

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
        
    - name: Test file structure integrity
      run: |
        echo "📁 Testing file structure integrity..."
        
        # Check that all required files exist
        REQUIRED_FILES=(
          "main.js"
          "package.json"
          "src/main/ScreenCaptureManager.js"
          "src/main/FileManager.js"
          "src/renderer/preview.html"
          "src/renderer/overlay.html"
          "src/renderer/preview-preload.js"
          "src/renderer/overlay-preload.js"
          "src/shared/constants.js"
          "src/shared/preload-utils.js"
        )
        
        for file in "${REQUIRED_FILES[@]}"; do
          if [ -f "$file" ]; then
            echo "✅ $file exists"
          else
            echo "❌ Missing required file: $file"
            exit 1
          fi
        done
        
    - name: Test build process
      run: |
        echo "🔨 Testing build process..."
        npm run build:setup
        
        # Verify build setup created necessary files
        if [ -f "assets/ICON-SETUP.md" ]; then
          echo "✅ Build setup completed successfully"
        else
          echo "❌ Build setup failed"
          exit 1
        fi

  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Analyze bundle size
      run: |
        echo "📏 Analyzing bundle size..."
        
        # Check node_modules size
        NODE_MODULES_SIZE=$(du -sm node_modules/ | cut -f1)
        echo "Node modules size: ${NODE_MODULES_SIZE}MB"
        
        if [ "$NODE_MODULES_SIZE" -gt 500 ]; then
          echo "⚠️ Large node_modules size: ${NODE_MODULES_SIZE}MB"
        else
          echo "✅ Node modules size is acceptable: ${NODE_MODULES_SIZE}MB"
        fi