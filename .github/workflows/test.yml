name: Automated Testing

on:
  push:
    branches: [ main, feature/* ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  actions: read

jobs:
  unit-tests:
    name: Unit Tests - ${{ matrix.os }} Node ${{ matrix.node-version }}
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        node-version: [18.x, 20.x]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Verify test setup
      run: |
        echo "üß™ Verifying Jest configuration and tests..."
        
        # Check Jest config exists
        if [ -f "jest.config.js" ]; then
          echo "‚úÖ Jest configuration found"
        else
          echo "‚ùå Jest configuration missing"
          exit 1
        fi
        
        # Check test directory exists with tests
        if [ -d "tests/unit" ] && [ "$(ls -A tests/unit/*.test.js 2>/dev/null | wc -l)" -gt "0" ]; then
          echo "‚úÖ Unit tests found: $(ls tests/unit/*.test.js | wc -l) test files"
        else
          echo "‚ùå No unit test files found in tests/unit/"
          exit 1
        fi
        
    - name: Run unit tests
      run: |
        echo "üß™ Running unit tests..."
        npm test -- --verbose --coverage
        
    - name: Run E2E tests
      run: |
        echo "üß™ Running E2E tests..."
        npm run test:e2e -- --verbose

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      if: success() && matrix.os == 'ubuntu-latest' && matrix.node-version == '20.x'
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: ${{ matrix.os }}-node-${{ matrix.node-version }}
        fail_ci_if_error: false

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
        
    - name: Test file structure integrity
      run: |
        echo "üìÅ Testing file structure integrity..."
        
        # Check that all required files exist
        REQUIRED_FILES=(
          "main.js"
          "package.json"
          "src/main/ScreenCaptureManager.js"
          "src/main/FileManager.js"
          "src/renderer/preview.html"
          "src/renderer/overlay.html"
          "src/renderer/preview-preload.js"
          "src/renderer/overlay-preload.js"
          "src/shared/constants.js"
          "src/shared/preload-utils.js"
        )
        
        for file in "${REQUIRED_FILES[@]}"; do
          if [ -f "$file" ]; then
            echo "‚úÖ $file exists"
          else
            echo "‚ùå Missing required file: $file"
            exit 1
          fi
        done
        
    - name: Test build process
      run: |
        echo "üî® Testing build process..."
        npm run build:setup
        
        # Verify build setup created necessary files
        if [ -f "assets/ICON-SETUP.md" ]; then
          echo "‚úÖ Build setup completed successfully"
        else
          echo "‚ùå Build setup failed"
          exit 1
        fi
        
    - name: Run integration tests
      run: |
        echo "üß™ Running integration tests..."
        npm run test:integration -- --verbose
        
    - name: Run E2E tests
      run: |
        echo "üß™ Running E2E tests..."
        npm run test:e2e -- --verbose

  comprehensive-tests:
    name: All Tests Suite
    runs-on: ubuntu-latest
    needs: unit-tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run all tests with coverage
      run: |
        echo "üß™ Running complete test suite..."
        npm run test:coverage -- --verbose
        
    - name: Verify all test types pass
      run: |
        echo "‚úÖ Running unit tests..."
        npm run test:unit
        
        echo "‚úÖ Running integration tests..."
        npm run test:integration
        
        echo "‚úÖ Running E2E tests..."
        npm run test:e2e
        
        echo "üéâ All test types completed successfully!"
        
    - name: Generate test summary
      run: |
        echo "üìä Test Results Summary" >> $GITHUB_STEP_SUMMARY
        echo "===================" >> $GITHUB_STEP_SUMMARY
        echo "‚úÖ Unit Tests: Passed" >> $GITHUB_STEP_SUMMARY
        echo "‚úÖ Integration Tests: Passed" >> $GITHUB_STEP_SUMMARY
        echo "‚úÖ E2E Tests: Passed" >> $GITHUB_STEP_SUMMARY
        echo "‚úÖ Coverage: Generated" >> $GITHUB_STEP_SUMMARY

  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Analyze bundle size
      run: |
        echo "üìè Analyzing bundle size..."
        
        # Check node_modules size
        NODE_MODULES_SIZE=$(du -sm node_modules/ | cut -f1)
        echo "Node modules size: ${NODE_MODULES_SIZE}MB"
        
        if [ "$NODE_MODULES_SIZE" -gt 500 ]; then
          echo "‚ö†Ô∏è Large node_modules size: ${NODE_MODULES_SIZE}MB"
        else
          echo "‚úÖ Node modules size is acceptable: ${NODE_MODULES_SIZE}MB"
        fi