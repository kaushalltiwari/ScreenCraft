name: Automated Testing

on:
  push:
    branches: [ main, feature/* ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  actions: read

jobs:
  unit-tests:
    name: Unit Tests - ${{ matrix.os }} Node ${{ matrix.node-version }}
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        node-version: [18.x, 20.x]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Verify test setup
      run: |
        echo "üß™ Verifying Jest configuration and tests..."
        node -e "
          const fs = require('fs');
          
          // Check Jest config exists
          if (fs.existsSync('jest.config.js')) {
            console.log('‚úÖ Jest configuration found');
          } else {
            console.log('‚ùå Jest configuration missing');
            process.exit(1);
          }
          
          // Check test directory exists with tests
          if (fs.existsSync('tests/unit')) {
            const testFiles = fs.readdirSync('tests/unit').filter(f => f.endsWith('.test.js'));
            if (testFiles.length > 0) {
              console.log('‚úÖ Unit tests found: ' + testFiles.length + ' test files');
            } else {
              console.log('‚ùå No unit test files found in tests/unit/');
              process.exit(1);
            }
          } else {
            console.log('‚ùå tests/unit directory not found');
            process.exit(1);
          }
        "
        
    - name: Run unit tests
      run: |
        echo "üß™ Running unit tests..."
        npm test -- --verbose --coverage
        
    - name: Run E2E tests
      run: |
        echo "üß™ Running E2E tests..."
        npm run test:e2e -- --verbose

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      if: success() && matrix.os == 'ubuntu-latest' && matrix.node-version == '20.x'
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: ${{ matrix.os }}-node-${{ matrix.node-version }}
        fail_ci_if_error: false

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
        
    - name: Test file structure integrity
      run: |
        echo "üìÅ Testing file structure integrity..."
        node -e "
          const fs = require('fs');
          const requiredFiles = [
            'main.js',
            'package.json',
            'src/main/ScreenCaptureManager.js',
            'src/main/FileManager.js',
            'src/renderer/preview.html',
            'src/renderer/overlay.html',
            'src/renderer/preview-preload.js',
            'src/renderer/overlay-preload.js',
            'src/shared/constants.js',
            'src/shared/preload-utils.js'
          ];
          
          let allFilesExist = true;
          
          requiredFiles.forEach(file => {
            if (fs.existsSync(file)) {
              console.log('‚úÖ ' + file + ' exists');
            } else {
              console.log('‚ùå Missing required file: ' + file);
              allFilesExist = false;
            }
          });
          
          if (!allFilesExist) {
            process.exit(1);
          }
        "
        
    - name: Test build process
      run: |
        echo "üî® Testing build process..."
        npm run build:setup
        
        node -e "
          const fs = require('fs');
          
          // Verify build setup created necessary files
          if (fs.existsSync('assets/ICON-SETUP.md')) {
            console.log('‚úÖ Build setup completed successfully');
          } else {
            console.log('‚ùå Build setup failed');
            process.exit(1);
          }
        "
        
    - name: Run integration tests
      run: |
        echo "üß™ Running integration tests..."
        npm run test:integration -- --verbose
        
    - name: Run E2E tests
      run: |
        echo "üß™ Running E2E tests..."
        npm run test:e2e -- --verbose

  comprehensive-tests:
    name: All Tests Suite
    runs-on: ubuntu-latest
    needs: unit-tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run all tests with coverage
      run: |
        echo "üß™ Running complete test suite..."
        npm run test:coverage -- --verbose
        
    - name: Verify all test types pass
      run: |
        echo "‚úÖ Running unit tests..."
        npm run test:unit
        
        echo "‚úÖ Running integration tests..."
        npm run test:integration
        
        echo "‚úÖ Running E2E tests..."
        npm run test:e2e
        
        echo "üéâ All test types completed successfully!"
        
    - name: Generate test summary
      run: |
        echo "üìä Test Results Summary" >> $GITHUB_STEP_SUMMARY
        echo "===================" >> $GITHUB_STEP_SUMMARY
        echo "‚úÖ Unit Tests: Passed" >> $GITHUB_STEP_SUMMARY
        echo "‚úÖ Integration Tests: Passed" >> $GITHUB_STEP_SUMMARY
        echo "‚úÖ E2E Tests: Passed" >> $GITHUB_STEP_SUMMARY
        echo "‚úÖ Coverage: Generated" >> $GITHUB_STEP_SUMMARY

  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Analyze bundle size
      run: |
        echo "üìè Analyzing bundle size..."
        
        node -e "
          const fs = require('fs');
          const path = require('path');
          
          function getDirSize(dirPath) {
            let totalSize = 0;
            
            function calculateSize(currentPath) {
              const stats = fs.statSync(currentPath);
              
              if (stats.isDirectory()) {
                const files = fs.readdirSync(currentPath);
                files.forEach(file => {
                  calculateSize(path.join(currentPath, file));
                });
              } else {
                totalSize += stats.size;
              }
            }
            
            try {
              calculateSize(dirPath);
              return Math.round(totalSize / (1024 * 1024)); // Convert to MB
            } catch (error) {
              return 0;
            }
          }
          
          const nodeModulesSize = getDirSize('node_modules');
          console.log('Node modules size: ' + nodeModulesSize + 'MB');
          
          if (nodeModulesSize > 500) {
            console.log('‚ö†Ô∏è Large node_modules size: ' + nodeModulesSize + 'MB');
          } else {
            console.log('‚úÖ Node modules size is acceptable: ' + nodeModulesSize + 'MB');
          }
        "